pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        booleanParam(name: 'deploy', defaultValue: false, description: 'Toggle this value')
    }

    environment {
        nexusUrl = 'http://13.233.238.175:8081'
        region = "ap-south-1"
        account_id = "992382681023"
        // NOTE: You cannot declare 'def' in environment. Moved appVersion to script block
    }

    stages {

        stage('Read the Version') {
            steps {
                script {
                    def packageJson = readJSON file: 'package.json'
                    env.appVersion = packageJson.version
                    echo "Application version: ${env.appVersion}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    npm install
                    ls -ltr
                    echo "Application version: ${appVersion}"
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    zip -q -r backend-${appVersion}.zip * -x Jenkinsfile -x backend-${appVersion}.zip
                    ls -ltr
                '''
            }
        }

        /*
        stage('Docker Build') {
            steps {
                sh '''
                    aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.${region}.amazonaws.com

                    docker build -t ${account_id}.dkr.ecr.${region}.amazonaws.com/expense-backend:${appVersion} .

                    docker push ${account_id}.dkr.ecr.${region}.amazonaws.com/expense-backend:${appVersion}
                '''
            }
        }

        stage('Helm Deploy') {
            steps {
                sh '''
                    aws eks update-kubeconfig --region ${region} --name expense-dev
                    cd helm
                    sed -i 's/IMAGE_VERSION/${appVersion}/g' values.yaml
                    helm upgrade backend .
                '''
            }
        }
        */

        stage('Sonar Scan') {
            environment {
                scannerHome = tool 'sonar-6.0' // SonarScanner CLI
            }
            steps {
                script {
                    withSonarQubeEnv('sonar-6.0') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Nexus Artifact Upload') {
            steps {
                script {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${nexusUrl}",
                        groupId: 'com.expense',
                        version: "${appVersion}",
                        repository: "backend",
                        credentialsId: 'nexus-auth',
                        artifacts: [[
                            artifactId: "backend",
                            classifier: '',
                            file: "backend-${appVersion}.zip",
                            type: 'zip'
                        ]]
                    )
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    return params.deploy
                }
            }
            steps {
                script {
                    def deployParams = [
                        string(name: 'appVersion', value: "${appVersion}")
                    ]
                    build job: 'backend-deploy', parameters: deployParams, wait: false
                }
            }
        }
    }

    post {
        always {
            echo 'üåÄ Cleanup: Deleting workspace...'
            deleteDir()
        }
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
    }
}
