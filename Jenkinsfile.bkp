pipeline {
    agent {
        label 'AGENT-1'  // Make sure the Jenkins agent is correctly labeled
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        booleanParam(name: 'deploy', defaultValue: false, description: 'Enable this to trigger backend deployment')
    }

    environment {
        nexusUrl = 'http://13.233.238.175:8081'     // ‚úÖ Your Nexus public URL
        region = 'ap-south-1'                       // ‚úÖ AWS region for EKS/ECR
        account_id = '102080400969'                 // ‚úÖ Your AWS account ID
    }

    stages {

        stage('Read the Version') {
            steps {
                script {
                    def packageJson = readJSON file: 'package.json'
                    env.appVersion = packageJson.version
                    echo "üì¶ Application version: ${env.appVersion}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "üì• Installing dependencies..."
                    npm install
                    ls -ltr
                    echo "‚úÖ Application version: ${env.appVersion}"
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    echo "üì¶ Building application ZIP file..."
                    zip -q -r backend-${env.appVersion}.zip * -x Jenkinsfile -x backend-${env.appVersion}.zip
                    ls -ltr
                '''
            }
        }

        stage('Sonar Scan') {
            environment {
                scannerHome = tool 'sonar-6.0'  // üîß Replace with your actual Sonar tool name in Jenkins
            }
            steps {
                script {
                    withSonarQubeEnv('sonar-6.0') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Nexus Artifact Upload') {
            steps {
                script {
                    echo "üöÄ Uploading backend-${env.appVersion}.zip to Nexus..."
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${nexusUrl}",
                        groupId: 'com.expense',
                        version: "${env.appVersion}",
                        repository: 'backend',
                        credentialsId: 'nexus-auth',   // üîê Must exist in Jenkins credentials
                        artifacts: [[
                            artifactId: 'backend',
                            classifier: '',
                            file: "backend-${env.appVersion}.zip",
                            type: 'zip'
                        ]]
                    )
                }
            }
        }

        stage('Deploy') {
            when {
                expression { return params.deploy }
            }
            steps {
                script {
                    def deployParams = [
                        string(name: 'appVersion', value: "${env.appVersion}")
                    ]
                    echo "üì¶ Triggering backend-deploy job with version ${env.appVersion}"
                    build job: 'backend-deploy', parameters: deployParams, wait: false
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo '‚úÖ Pipeline executed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Please check logs.'
        }
    }
}
